<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>netstandard2.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <LangVersion>default</LangVersion>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <Version>0.0.1-alpha</Version>
        <Title>SuperFluid</Title>
        <Authors>James Hughes</Authors>
        <Description>An incremental source generator for fluent APIs with grammar</Description>
        <PackageProjectUrl>https://github.com/hughesjs/SuperFluid</PackageProjectUrl>
        <PackageLicenseUrl>https://github.com/hughesjs/SuperFluid/blob/master/LICENSE</PackageLicenseUrl>
        <RepositoryUrl>https://github.com/hughesjs/SuperFluid.git</RepositoryUrl>
        <RepositoryType>git</RepositoryType>
        <PackageReadmeFile>./README.md</PackageReadmeFile>
        <IncludeBuildOutput>false</IncludeBuildOutput>
        <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
        <developmentDependency>true</developmentDependency>
    </PropertyGroup>

    <ItemGroup>
        <None Include="../../README.md" Pack="true" PackagePath="\" />
    </ItemGroup>

    <ItemGroup>
        <InternalsVisibleTo Include="SuperFluid.Tests" />
    </ItemGroup>

    <ItemGroup>
        <PackageReference Include="Microsoft.CodeAnalysis.CSharp" Version="4.4.0" PrivateAssets="all" />
        <PackageReference Include="YamlDotNet" Version="13.1.1" PrivateAssets="all" GeneratePathProperty="true" />
    </ItemGroup>
    
    <!-- Gross hack to let source generator use nuget packages -->
    <PropertyGroup>
        <GetTargetPathDependsOn>$(GetTargetPathDependsOn);GetDependencyTargetPaths</GetTargetPathDependsOn>
    </PropertyGroup>
    
    <Target Name="GetDependencyTargetPaths" AfterTargets="ResolvePackageDependenciesForBuild">
            <ItemGroup>
                <TargetPathWithTargetPlatformMoniker Include="@(ResolvedCompileFileDefinitions)" IncludeRuntimeDependency="false" />
                <None Include="@(ResolvedCompileFileDefinitions)" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
            </ItemGroup>
    </Target>
    <!-- End Hack -->
    
    
    <ItemGroup>
        <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
    </ItemGroup>

<!--    <Target Name="AddNugetDlls" BeforeTargets="_GetPackageFiles">-->
<!--        &lt;!&ndash; Merge the collection of PackageReference and Assemblies using the NuGetPackageId key.-->
<!--             This produces a new list containing the DLL path and the "IncludeInPackage" metadata&ndash;&gt;-->
<!--        <JoinItems Left="@(ResolvedCompileFileDefinitions)" LeftKey="NuGetPackageId" LeftMetadata="*" Right="@(PackageReference)" RightKey="" RightMetadata="*" ItemSpecToUse="Left">-->
<!--            <Output TaskParameter="JoinResult" ItemName="_PackagesToPack" />-->
<!--        </JoinItems>-->

<!--        <ItemGroup>-->
<!--            &lt;!&ndash; Remove NETStandard DLLs &ndash;&gt;-->
<!--            <_PackagesToPack Remove="@(_PackagesToPack)" Condition="%(NuGetPackageId) == 'NETStandard.Library'" />-->
<!--        </ItemGroup>-->

<!--        <Message Importance="High" Text="Adding DLLs from the following packages: @(_PackagesToPack->'%(NuGetPackageId)')" />-->

<!--        <ItemGroup>-->
<!--            &lt;!&ndash; Update the collection of items to pack with the DLLs from the NuGet packages &ndash;&gt;-->
<!--            <None Include="@(_PackagesToPack)" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />-->

<!--            &lt;!&ndash; Add the DLL produced by the current project to the NuGet package &ndash;&gt;-->
<!--            <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />-->
<!--        </ItemGroup>-->
<!--    </Target>-->
</Project>
